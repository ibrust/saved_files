Mostly these are just philosophical points
_____________________________________________________
-code rot spreads - not only by forming dependencies, it also sets a standard of laziness for the team 
-speak out what you're doing before conversing with others so that you can explain it better
-think about questions very critically before you ask them (I think this depends on who you're asking but generally it's probably sound advice)
-instead of proposing a big change, create a small change and show people a tangible result. You get them comfortable with it, sneaking your change in gradually.
-Try to keep an eye on the big picture of your project, most software disasters occur when people lose track of the big picture / get tunnel vision
-it is important to draw the line between good enough and perfect. don't sacrifice requirements, but don't golden-toiletseat the code. 
    especially when you have deadlines, cashflow constraints, etc. bearing down on you 
-similarly, releasing early & getting user feedback is preferable to waiting for release (the author says this but there are quality standards to meet) 
-you don't want to overembellish or overrefine your code, you should know when to stop adding complexity and move forward 
    he talks about 'feature bloat' (more features than you'd ever want) and mentions that with modularization (many layers) comes added complexity / time investment
-